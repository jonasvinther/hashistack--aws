#cloud-config
# vim: syntax=yaml
#
# ***********************
# 	---- for more examples look at: ------
  # ---> https://cloudinit.readthedocs.io/en/latest/topics/examples.html
  # ******************************
  #
  # This is the configuration syntax that the write_files module
  # will know how to understand. encoding can be given b64 or gzip or (gz+b64).
  # The content will be decoded accordingly and then written to the path that is
  # provided.
  #
  # Note: Content strings here are truncated for example purposes.
  
  write_files:
    - content: |
        [Unit]
        Description=Nomad
        Documentation=https://www.nomadproject.io/docs
        Wants=network-online.target
        After=network-online.target
  
        [Service]
        ExecReload=/bin/kill -HUP $MAINPID
        ExecStart=/usr/bin/nomad agent -config /etc/nomad.d
        KillMode=process
        KillSignal=SIGINT
        LimitNOFILE=infinity
        LimitNPROC=infinity
        Restart=on-failure
        RestartSec=2
        StartLimitBurst=3
        StartLimitIntervalSec=10
        TasksMax=infinity
  
        [Install]
        WantedBy=multi-user.target  
      path: /etc/systemd/system/nomad.service
    - content: |
        datacenter = "${DATACENTER_NAME}"
        data_dir = "/opt/nomad"
      path: /etc/nomad.d/nomad.hcl
    - content: |
        server {
          enabled = false
        }
      path: /etc/nomad.d/server.hcl
    - content: |
        client {
          enabled = true

          meta {
            type = "client"
          }
        }
        plugin "raw_exec" {
          config {
            enabled = ${NOMAD_DRIVER_RAW_EXEC}
          }
        }
      path: /etc/nomad.d/client.hcl
  

    # Consul client configuration
    - content: |
        [Unit]
        Description="HashiCorp Consul - A service mesh solution"
        Documentation=https://www.consul.io/
        Requires=network-online.target
        After=network-online.target
        ConditionFileNotEmpty=/etc/consul.d/consul.hcl

        [Service]
        EnvironmentFile=-/etc/consul.d/consul.env
        User=consul
        Group=consul
        ExecStart=/usr/bin/consul agent -config-dir=/etc/consul.d/
        ExecReload=/bin/kill --signal HUP $MAINPID
        KillMode=process
        KillSignal=SIGTERM
        Restart=on-failure
        LimitNOFILE=65536

        [Install]
        WantedBy=multi-user.target
      path: /etc/systemd/system/consul.service

    - content: |
        datacenter = "dc1"
        data_dir = "/opt/consul"
        verify_incoming = false
        verify_outgoing = false
        verify_server_hostname = false
        retry_join = ["provider=aws tag_key=ConsulAutoJoin tag_value=auto-join access_key_id=${AWS_ACCESS_KEY_ID} secret_access_key=${AWS_SECRET_ACCESS_KEY}"]
        server = false
        bootstrap_expect = 0
        bind_addr = "0.0.0.0"
        client_addr = "0.0.0.0"

        ports {
          grpc = 8502
        }
      path: /etc/consul.d/consul.hcl

  runcmd:
    # Init Nomad section
    - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    - apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    
    # Init Docker section
    - ${NOMAD_DRIVER_DOCKER} && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - ${NOMAD_DRIVER_DOCKER} && apt-add-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    # Install CNI plugin
    - ${NOMAD_DRIVER_DOCKER} && curl -L -o cni-plugins.tgz "https://github.com/containernetworking/plugins/releases/download/v0.9.0/cni-plugins-linux-$( [ $(uname -m) = aarch64 ] && echo arm64 || echo amd64)"-v0.9.0.tgz
    - ${NOMAD_DRIVER_DOCKER} && sudo mkdir -p /opt/cni/bin
    - ${NOMAD_DRIVER_DOCKER} && sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz
    
    # Enable container traffic through the bridge network
    - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-arptables
    - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-ip6tables
    - ${NOMAD_DRIVER_DOCKER} && echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
    - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-arptables = 1" >> /etc/sysctl.conf
    - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-ip6tables" >> /etc/sysctl.conf
    - ${NOMAD_DRIVER_DOCKER} && echo "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf

    # Global update
    - apt-get update
    - sudo apt-get install jq -y
  
    # Intall Consul section
    - sudo apt-get install consul -y
    - mkdir --parents /opt/consul
    - chown --recursive consul:consul /opt/consul
    - chown --recursive consul:consul /etc/consul.d
    - chmod 640 /etc/consul.d/consul.hcl
    - systemctl enable consul
    - systemctl start consul

    # Install Nomad section  
    - sudo apt-get install nomad -y
    - mkdir --parents /etc/nomad.d && chmod 700 /etc/nomad.d
    - systemctl enable nomad
    - systemctl start nomad

    # Install Docker section
    - ${NOMAD_DRIVER_DOCKER} && sudo apt-get install docker-ce docker-ce-cli containerd.io -y
    - ${NOMAD_DRIVER_DOCKER} && sudo usermod -aG docker nomad
    - ${NOMAD_DRIVER_DOCKER} && systemctl enable nomad docker containerd
    - ${NOMAD_DRIVER_DOCKER} && systemctl start nomad docker containerd
  
  final_message: "Nomad server installed and ready"
  